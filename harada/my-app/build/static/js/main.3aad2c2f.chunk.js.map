{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["InputForm","props","react_default","a","createElement","onSubmit","startCalculator","type","value","pTerm","onChange","updatePTerm","updatArithmetic","lTerm","updateLTerm","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","arithmetic","total","bind","assertThisInitialized","handleRadioClick","e","setState","target","name","map","item","checked","setStaet","preventDefault","Number","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3aad2c2f.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nfunction InputForm(props){\n  // const items = props.arithmetic;\n  // const listItems = items.map((r)=>{\n  //   <label>\n  //     <input \n  //       type='radio'\n  //       name='arithmethic'\n  //       value={r.arithmetic.value}\n  //       checked={r.arithmetic.checked}\n  //       onChange={props.handleRadioClick}\n  //     />\n  //   </label>\n  // })\n  return (\n    <form onSubmit={props.startCalculator}>\n      <input type='tel' value={props.pTerm} onChange={props.updatePTerm} />\n      <select onChange={props.updatArithmetic}>\n        <option value='+'>+</option>\n        <option value='-'>-</option>\n        <option value='*'>*</option>\n        <option value='/'>/</option>\n      </select>\n      <input type='tel' value={props.lTerm} onChange={props.updateLTerm} />\n      <input type=\"submit\" value=\"=\"/>\n    </form>\n  )\n}\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      pTerm:0,\n      lTerm:0,\n      // arithmetic: [\n      //   {value:'+',checked:false},\n      //   {value:'-',checked:false},\n      //   {value:'*',checked:false},\n      //   {value:'/',checked:false},\n      // ],\n      arithmetic:\"+\",\n      total:0\n    };\n    this.updatePTerm = this.updatePTerm.bind(this);\n    this.updateLTerm = this.updateLTerm.bind(this);\n    this.handleRadioClick = this.handleRadioClick.bind(this);\n    this.startCalculator = this.startCalculator.bind(this);\n    this.updatArithmetic = this.updatArithmetic.bind(this);\n  }\n  updatePTerm(e){\n    // const total = this.state.pTerm + this.state.lTerm;\n    this.setState({\n      pTerm:e.target.value,\n      // total:total\n    });\n  }\n  updateLTerm(e){\n    // const total = this.state.pTerm + this.state.lTerm;\n    this.setState({\n      lTerm:e.target.value,\n      // total:total\n    });\n  }\n  updatArithmetic(e){\n    this.setState({\n      arithmetic:e.target.value\n    })\n  }\n  handleRadioClick(e){\n    let name = e.target.value\n    let value = this.state.arithmetic.map((item)=>{\n      return({\n        value:item.value,\n        checked:(item.value===name)? true:false\n      })\n    })\n    this.setStaet({\n      arithmetic:value\n    })\n  }\n  startCalculator(e){\n    e.preventDefault();\n    let total\n    if(this.state.arithmetic===\"+\"){\n      total = Number(this.state.pTerm) + Number(this.state.lTerm);\n    }\n    if(this.state.arithmetic===\"-\"){\n      total = Number(this.state.pTerm) - Number(this.state.lTerm);\n    }\n    if(this.state.arithmetic===\"*\"){\n      total = Number(this.state.pTerm) * Number(this.state.lTerm);\n    }\n    if(this.state.arithmetic===\"/\"){\n      total = Number(this.state.pTerm) / Number(this.state.lTerm);\n    }\n    this.setState({\n      total:total\n    });\n  }\n  render() {\n    return(\n      <div className=\"App\">\n        <InputForm\n          updatePTerm={this.updatePTerm}\n          updateLTerm={this.updateLTerm}\n          handleRadioClick={this.handleRadioClick}\n          startCalculator={this.startCalculator}\n          updatArithmetic={this.updatArithmetic}\n        />\n        <div>\n          {this.state.total}  \n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}